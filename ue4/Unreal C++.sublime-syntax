%YAML 1.2
---
name: unreal c++
file_extensions:
  - cpp
  - cc
  - cp
  - cxx
  - c++
  - C
  - h
  - hh
  - hpp
  - hxx
  - h++
  - inl
  - ipp
scope: source.unreal.c++
variables:
  identifier: '\b[[:alpha:]_][[:alnum:]_]*\b'
  path_lookahead: '(::\s*)?({{identifier}}\s*::\s*)*{{identifier}}'
  macro_identifier: '\b[[:upper:]_][[:upper:][:digit:]_]*\b'
  operator_method_name: '\boperator\s*(?:[-+*/%^&|~!=<>]|[-+*/%^&|=!<>]=|<<=?|>>=?|&&|\|\||\+\+|--|,|->\*?|\(\)|\[\]|""\s*{{identifier}})'
  casts: 'const_cast|dynamic_cast|reinterpret_cast|static_cast'
  operator_keywords: 'and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|xor|xor_eq|noexcept'
  control_keywords: 'break|case|catch|continue|default|do|else|for|goto|if|_Pragma|return|switch|throw|try|while'
  memory_operators: 'new|delete'
  basic_types: 'asm|__asm__|auto|bool|_Bool|char|_Complex|double|float|_Imaginary|int|long|short|signed|unsigned|void'
  before_tag: 'struct|union|enum\s+class|enum\s+struct|enum|class'
  declspec: '__declspec\(\s*\w+(?:\([^)]+\))?\s*\)'
  storage_classes: 'static|export|extern|friend|explicit|virtual|register|thread_local'
  type_qualifier: 'const|constexpr|mutable|typename|volatile'
  compiler_directive: 'inline|restrict|__restrict__|__restrict'
  visibility_modifiers: 'private|protected|public'
  other_keywords: 'typedef|decltype|nullptr|{{visibility_modifiers}}|static_assert|sizeof|using|typeid|alignof|alignas|namespace|template'
  modifiers: '{{storage_classes}}|{{type_qualifier}}|{{compiler_directive}}'
  non_angle_brackets: '(?=<<|<=)'
  generic_lookahead: '<(?:\s*(?:{{path_lookahead}}|\d+)(?:{{path_lookahead}}|&(?!&)|\*|,|\.|<.*?>|\s|\d)*)?>'
  data_structures_forward_decl_lookahead: '(\s+{{macro_identifier}})*\s*(:\s*({{path_lookahead}}|{{visibility_modifiers}}|,|\s|<[^;]*>)+)?;'
  non_func_keywords: 'if|for|switch|while|decltype|sizeof|__declspec|__attribute__|typeid|alignof|alignas|static_assert'

contexts:
  main:
    - include: unreal-type-macro
    - include: braces
    - include: class-definition
    - match: \bstruct\b
      push: struct-definition
    - include: declare-delegate
    - match: \b({{control_keywords}})\b
      scope: keyword.control.c++

  prototype:
    - include: comment
    - include: pre-processor
    - include: strings

  braces:
    - match: \{
      push: braces-inner
  braces-inner:
    - match: \{
      push: braces-inner
    - match: \}
      pop: true

  pre-processor:
    - match: ^\s*\#define
      scope: keyword.control.c++
      push:
      - match: (([[:alpha:]_][[:alnum:]_]*))
        scope: entity.name.macro
        set: pre-processor-define-tail
    - match: ^\s*\#\w+
      scope: keyword.control.c++
  pre-processor-define-tail:
    - match: \\\n
      set: pre-processor-define-tail
    - match: \n
      pop: true

  declare-delegate:
    - match: 'DECLARE_[[:alpha:]_]*DELEGATE_RetVal(_\w+)?'
      scope: keyword
      push:
      - match: \(\s*[^,]+,\s*(\w+)
        captures:
          1: entity.name.delegate
      - match: \)
        pop: true
    - match: 'DECLARE_[[:alpha:]_]*DELEGATE(_\w+)?'
      scope: keyword
      push:
      - match: \(\s*(\w+)
        captures:
          1: entity.name.delegate
      - match: \)
        pop: true
  strings:
    - include: c-strings
    - include: unique-strings

  c-strings:
    - match: '(L|u8|u|U)?(")'
      captures:
        1: storage.type.string.c
        2: punctuation.definition.string.begin.c
      push:
        - meta_scope: string.quoted.double.c
        - match: '"'
          scope: punctuation.definition.string.end.c
          pop: true
        - include: string_escaped_char
        - include: string_placeholder
    - match: "(L|u8|u|U)?(')"
      captures:
        1: storage.type.string.c
        2: punctuation.definition.string.begin.c
      push:
        - meta_scope: string.quoted.single.c
        - match: "'"
          scope: punctuation.definition.string.end.c
          pop: true
        - include: string_escaped_char

  string_escaped_char:
    - match: '(\\)$\n'
      captures:
        1: punctuation.separator.continuation.c
    - match: \\(?:\\|[abefnrtv\'"?]|[0-3][0-9]{0,2}|[4-7][0-9]?|x[a-fA-F0-9]+|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8})
      scope: constant.character.escape.c
    - match: \\.
      scope: invalid.illegal.unknown-escape.c

  string_placeholder:
    - match: |-
        (?x)%
          (\d+\$)?                                      # field (argument #)
          [#0\- +']*                                    # flags
          [,;:_]?                                       # separator character (AltiVec)
          ((-?\d+)|\*(-?\d+\$)?)?                       # minimum field width
          (\.((-?\d+)|\*(-?\d+\$)?)?)?                  # precision
          (hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)?          # length modifier
          (\[[^\]]+\]|[am]s|[diouxXDOUeEfFgGaACcSspn%]) # conversion type
      scope: constant.other.placeholder.c

  unique-strings:
    - match: '((?:L|u8|u|U)?R)("([^\(\)\\ ]{0,16})\()'
      captures:
        1: storage.type.string.c++
        2: punctuation.definition.string.begin.c++
      push:
        - meta_scope: string.quoted.double.c++
        - match: '\)\3"'
          scope: punctuation.definition.string.end.c++
          pop: true

  comment:
    - match: //.+
      scope: comment.line
    - match: /\*
      push:
      - meta_scope: comment.block
      - match: \*/
        pop: true

  unreal-type-macro:
    - match: \bUCLASS\b

  class-definition:
    - match: '(?=(class)(\s*({{identifier}}))+\s*[;\*>])'
      pop: true
    - match: '(class)(\s*({{identifier}}))+\s*'
      captures:
        1: keyword
        3: entity.name.class
      push:
      - meta_scope: meta.class
      # - meta_scope: markup.bold
      - match: \{
        push: class-open-bracket
      - match: ;
        pop: true

  class-open-bracket:
    - match: \{
      push: class-open-bracket
    - include: declare-delegate
    - include: unreal-member-definition
    - include: member-function-declaration
    - include: class-definition
    - match: \}
      pop: true

  member-function-declaration:
    - match: '{{identifier}}'
      push:
      - include: angle-brackets
      - match: '[*&]'
      - match: (?!\s+({{identifier}})\s*\()
        pop: true
      - match: (?=\s+({{identifier}})\s*\()
        set:
          - match: '{{identifier}}'
            scope: entity.name.function
            set:
            - include: member-function-declaration-parenthesis-inner
            - match: \{
              set: member-function-declaration-brace-inner
            - match: ;
              pop: true

  member-function-declaration-parenthesis:
    - match: \(
      set: member-function-declaration-parenthesis-inner
  member-function-declaration-parenthesis-inner:
    # - meta_scope: keyword
    - match: \(
      push: member-function-declaration-parenthesis-inner
    - match: \)
      pop: true
  member-function-declaration-brace-inner:
    # - meta_scope: keyword
    - match: \{
      push: member-function-declaration-brace-inner
    - match: \}
      pop: true

  angle-brackets:
    - match: '<(?!<)'
      scope: punctuation.section.generic.begin.c++
      push:
        - match: '>'
          scope: punctuation.section.generic.end.c++
          pop: true
        - include: expressions-minus-generic-type-function-call

  expressions-minus-generic-type-function-call:
    # - include: early-expressions-before-generic-type
    - include: angle-brackets
    # - include: early-expressions-after-generic-type
    # - include: late-expressions-before-function-call
    - include: identifiers
    - match: ';'
      scope: punctuation.terminator.c++

  identifiers:
    - match: '{{identifier}}\s*(::)\s*'
      captures:
        1: punctuation.accessor.c++
    - match: '(?:(::)\s*)?{{identifier}}'
      captures:
        1: punctuation.accessor.c++

  unreal-member-definition:
    - include: unreal-member-property
    - include: unreal-member-function

  unreal-member-function:
    - match: \bUFUNCTION\b
      scope: keyword
      push: unreal-member-function-meta

  unreal-member-function-meta:
    - match: \(
      set: unreal-member-function-meta-inner
  unreal-member-function-meta-inner:
    - meta_scope: meta.unreal.function
    - match: \(
      push: unreal-member-function-meta-inner
    - match: \)
      pop: true
    - match: DisplayName\s*=\s*"([^"]+)"
      captures:
        1: entity.name.display


  unreal-member-property:
    - match: \bUPROPERTY\b
      scope: keyword
      push: unreal-member-property-meta

  unreal-member-property-meta:
    - match: \(
      set: unreal-member-property-meta-inner
  unreal-member-property-meta-inner:
    - meta_scope: meta.unreal.property
    - match: \(
      push: unreal-member-property-meta-inner
    - match: \)
      pop: true
    - match: DisplayName\s*=\s*"([^"]+)"
      captures:
        1: entity.name.display
      

  struct-definition:
    - match: \{
      push: struct-open-bracket
    - match: ;
      pop: true

  struct-open-bracket:
    - match: \{
      push: struct-open-bracket
    - match: \}
      pop: true
